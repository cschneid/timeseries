#!/usr/bin/env ruby
begin
require 'optparse'
require "timeseries"

options = {
  :offset => 0,
  :period => "1s",
  :zone   => "UTC",
  :format => "%Y-%m-%d %H:%M:%S %Z",
  :signature => []
}

OptionParser.new do |opts|
  opts.banner = %{
Usage: #{$0} [options] [START_TIME] [STOP_TIME]

  Generate time series data.

Options:
}.lstrip

  opts.on("-d", "--debug", "debug mode") do
    $DEBUG = true
  end

  opts.on("-f", "--format FORMAT", "strftime format str (#{options[:format]})") do |str|
    options[:format] = str
  end

  opts.on("-h", "--help", "print this help") do
    puts opts
    puts
    exit
  end

  opts.on("-n", "--n-steps N", "number of steps") do |n_steps|
    options[:n_steps] = n_steps.to_i
    options[:signature] << :n_steps
  end

  opts.on("-o", "--offset OFFSET", "offset (#{options[:offset]})") do |offset|
    options[:offset] = offset.to_i
    options[:signature] << :offset
  end

  opts.on("-p", "--period PERIOD", "period (#{options[:period]})") do |period|
    options[:period] = period
    options[:signature] << :period
  end

  opts.on("-s", "--snap TYPE", "snap start/stop") do |code|
    case code
    when "pp" then options.merge!(:snap_start_time => :previous, :snap_stop_time => :previous)
    when "pn", "outer" then options.merge!(:snap_start_time => :previous, :snap_stop_time => :next)
    when "np", "inner" then options.merge!(:snap_start_time => :next, :snap_stop_time => :previous)
    when "nn" then options.merge!(:snap_start_time => :next, :snap_stop_time => :next)
    else raise "invalid snap code: #{code}"
    end
  end

  opts.on("-z", "--zone ZONE", "timezone (#{options[:zone]})") do |zone|
    options[:zone] = zone
  end
end.parse!

if ARGV.length > 2
  raise "extra arguments"
end
start, stop = ARGV.shift(2)

if start
  options[:start_time] = start
  options[:signature] << :start_time
end

if stop
  options[:stop_time]  = stop
  options[:signature] << :stop_time
end

Time.zone = options[:zone]
timeseries = Timeseries.create(options)
timeseries.each do |step|
  puts step.strftime(options[:format])
end

rescue Interrupt
  exit 130
rescue Errno::EPIPE 
  exit 0
rescue
  raise if $DEBUG
  $stderr.puts $!.message
  exit 1
end